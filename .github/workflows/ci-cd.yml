name: CI/CD Pipeline

env:
    SERVICE_NAME: "bmr-calculator"
    SERVICE_ENVIRONMENT: "${{ github.ref_name == 'main' && 'prod' || github.ref_name }}"
    IMAGE_URI: "gcr.io/${{ secrets.GCP_PROJECT_ID }}/$SERVICE_NAME-$SERVICE_ENVIRONMENT"

on:
  push:
    branches:
      - main
      - alpha
      - beta

jobs:
  build-test:
    name: Bld, Format, Lint, Test, Report
    runs-on: ubuntu-latest
    if: "! contains(github.event.head_commit.message, '[skip ci]')"

    steps:
      # Step 1: Check out the code from the repository
      - name: Check out repository
        uses: actions/checkout@v4
      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      # Step 3: Install dependencies (app, dev, and testing dependencies)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt # app dependencies
          pip install numpy Flask pytest pytest-cov flake8 black coverage bs4  # Dev/testing dependencies
      # Step 4: Run code formatting check with Black
      - name: Check code formatting with Black
        run: |
          black --diff .
      # Step 4: Run code formatting check with Black
      - name: Formatting with Black
        run: |
          black .
      # Step 5: Run code linting with Flake8
      - name: Lint code with Flake8
        run: |
          flake8 . -v
      # Step 6: Run unit tests and generate a coverage report
      - name: Run tests with Pytest and generate coverage report
        run: |
          pytest --cov=. --cov-report=xml --cov-report=term
      # Step 7: Upload coverage report as an artifact
      - name: Upload results to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: codecov-umbrella
          fail_ci_if_error: true
          files: ./coverage.xml
          flags: unittests
          verbose: true
      # Step 8: Run SonarCloud analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v3.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  semantic-release:
      name: Semantic Release
      runs-on: ubuntu-latest
      needs: build-test
      permissions:
        contents: write
      outputs:
        IMAGE_TAG: ${{ steps.semantic.outputs.new_release_version }}

      steps:
        - name: Checkout
          uses: actions/checkout@v4
        - uses: actions/setup-node@v4.1.0
          with:
            node-version: "lts/*"
        - name: Prepare prerelease semantic
          if: github.ref != 'refs/heads/main'
          run: mv .releaserc.prerelease.yml .releaserc.yml
        - name: Semantic Release
          uses: cycjimmy/semantic-release-action@v4
          id: semantic
          with:
            semantic_version: 24.1.0
            branches: |
              [
                '+([0-9])?(.{+([0-9]),x}).x',
                'main',
                {
                  name: 'alpha',
                  prerelease: true
                },
                {
                  name: 'beta',
                  prerelease: true
                }
              ]
            extra_plugins: |
              @semantic-release/changelog
              @semantic-release/exec
              @semantic-release/git
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        - name: New Release Version
          if: steps.semantic.outputs.new_release_published == 'true'
          run: |
            echo "New Realease Version: ${{ steps.semantic.outputs.new_release_version }}"

  deploy:
    name: Deployig To Environment
    runs-on: ubuntu-latest
    needs: 
      - build-test
      - semantic-release
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2.1.7
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
      - name: Set up gcloud Cloud SDK environment
        uses: google-github-actions/setup-gcloud@v2.1.2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      - name: Build and Push Docker Image to Container Registry
        run: |
          image=${{ env.IMAGE_URI }}:${{ needs.semantic-release.outputs.IMAGE_TAG }}
          gcloud auth configure-docker
          docker build -t $image ./app
          docker push $image
      - name: Deploy to Cloud Run
        run: |
          image=${{ env.IMAGE_URI }}:${{ needs.semantic-release.outputs.IMAGE_TAG }}
          gcloud run deploy ${{ env.SERVICE_NAME }}-${{ env.SERVICE_ENVIRONMENT }} \
            --image $image \
            --platform managed \
            --region ${{ secrets.GCP_REGION }} \
            --allow-unauthenticated \
            --project ${{ secrets.GCP_PROJECT_ID }}
      - name: Output the Cloud Run URL
        run: |
          echo "Cloud Run URL:"
          gcloud run services describe ${{ env.SERVICE_NAME }}-${{ env.SERVICE_ENVIRONMENT }} --platform managed --region ${{ secrets.GCP_REGION }} \
            --format 'value(status.url)'

      # ####################################
      # #          Terraform Steps
      # # This steps create a new container
      # # service and deploys with a new
      # # service uri
      # ####################################
      # # Set up Terraform
      # - name: Set up Terraform
      #   uses: hashicorp/setup-terraform@v3.1.2

      # # Initialize Terraform
      # - name: Terraform Init
      #   run: terraform init

      # # Plan Terraform deployment
      # - name: Terraform Plan
      #   run: terraform plan -out=tfplan -var "project_id=${{ secrets.GCP_PROJECT_ID }}" -var "region=${{ secrets.GCP_REGION }}" -var "service_name=${{ env.SERVICE_NAME }}-${{ env.SERVICE_ENVIRONMENT }}" -var "image=${{ env.IMAGE_URI }}:${{ needs.semantic-release.outputs.IMAGE_TAG }}"

      # # Apply Terraform deployment
      # - name: Terraform Apply
      #   run: terraform apply -auto-approve tfplan